{
  "name": "npm-authelia-access-control-sample",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -180,
        420
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$node[\"get-config-data\"].json[\"npm_uri\"]}}{{$node[\"get-config-data\"].json[\"npm_api_routes\"][\"base\"]}}{{$node[\"get-config-data\"].json[\"npm_api_routes\"][\"tokens\"]}}",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "identity",
              "value": "={{$json[\"npm_auth\"][\"email\"]}}"
            },
            {
              "name": "secret",
              "value": "={{$json[\"npm_auth\"][\"pass\"]}}"
            }
          ]
        }
      },
      "name": "post-npm-token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        200,
        420
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"get-config-data\"].json[\"npm_uri\"]}}{{$node[\"get-config-data\"].json[\"npm_api_routes\"][\"base\"]}}{{$node[\"get-config-data\"].json[\"npm_api_routes\"][\"proxy-hosts\"]}}",
        "options": {
          "splitIntoItems": false
        },
        "headerParametersUi": {
          "parameter": [
            {
              "name": "authorization",
              "value": "=Bearer {{$json[\"token\"]}}"
            }
          ]
        }
      },
      "name": "get-proxy-hosts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        360,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "\nreturn [\n   {\n      \"npm_uri\":\"http://IP:PORT\",\n      \"npm_auth\":{\n         \"email\":\"email@example.com\",\n         \"pass\":\"changeme\"\n      },\n      \"access_control_dir\":\"/configs\",//save the file to a dir\n      \"access_control\":{\n         \"default_policy\": \"deny\",\n         \"auth_domain\": \"auth.mydomain.com\",\n         \"rule_policy\": \"one_factor\"\n      },\n      \"npm_api_routes\":{\n         \"base\":\"/api\",\n         \"tokens\": \"/tokens\",\n         \"users\": \"/users\",\n         \"proxy-hosts\": \"/nginx/proxy-hosts\",\n         \"redirection-hosts\": \"/nginx/redirection-hosts\",\n         \"dead-hosts\": \"/nginx/dead-hosts\",\n         \"certificates\": \"/nginx/certificates\",\n         \"access-list\": \"/nginx/access-lists\",\n         \"settings\": \"/settings\"\n      }\n   }\n]"
      },
      "name": "get-config-data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        0,
        420
      ]
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "convertAllData": false,
        "options": {
          "encoding": "utf8",
          "fileName": "access_control.yml",
          "keepSource": true,
          "useRawData": true
        }
      },
      "name": "convert-json-binary",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        760,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "var getConfigData = $node[\"get-config-data\"].json;\nvar getProxyHosts = $node[\"get-proxy-hosts\"].json;\n\nvar access_control = [];\nvar proxyHosts = [];\n\nfor(proxy in getProxyHosts){\n  let data = getProxyHosts[proxy].domain_names;\n  for(d in data){\n    proxyHosts.push(data[d]);\n  }\n}\nvar rulesHosts = proxyHosts.sort(function (a, b) {\n    return a.localeCompare(b);\n});\n\nfunction array_move(arr, old_index, new_index) {\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr; // for testing\n};\nrulesHosts = array_move(rulesHosts, rulesHosts.indexOf(getConfigData.access_control.auth_domain),0);\n\nfor(i in rulesHosts){\n  var data = rulesHosts[i];\n  var comment = `# ${data.split(\".\")[0]} | `;\n  var domain = data;\n  var policy = 'one_factor';\n  if(domain == getConfigData.access_control.auth_domain){\n    policy = \"bypass\"\n  }\n  access_control.push(`      ${comment}\\n    - domain: \"${domain}\"\\n      policy: ${policy}\\n`);\n}\nreturn {\n  data: `access_control:\\n  default_policy: ${getConfigData.access_control.default_policy}\\n  rules: \\n\\n${access_control.join('\\n')}`\n  }"
      },
      "name": "mux-access-control-yml",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        560,
        420
      ]
    },
    {
      "parameters": {
        "fileName": "={{$node[\"get-config-data\"].json[\"access_control_dir\"]}}/{{$node[\"convert-json-binary\"].binary.data.fileName}}"
      },
      "name": "write-access-control-yml",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        940,
        420
      ]
    }
  ],
  "connections": {
    "post-npm-token": {
      "main": [
        [
          {
            "node": "get-proxy-hosts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "get-config-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-proxy-hosts": {
      "main": [
        [
          {
            "node": "mux-access-control-yml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-config-data": {
      "main": [
        [
          {
            "node": "post-npm-token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert-json-binary": {
      "main": [
        [
          {
            "node": "write-access-control-yml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mux-access-control-yml": {
      "main": [
        [
          {
            "node": "convert-json-binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": 57,
  "tags": []
}